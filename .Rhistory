+gyros_arm_x
+gyros_dumbbell_x
+gyros_forearm_x
+accel_belt_x
+accel_belt_y
+accel_arm_x
+accel_arm_y
+accel_dumbbell_x
+accel_dumbbell_y
+accel_forearm_x
+accel_forearm_y
+pitch_belt
+pitch_arm
+pitch_dumbbell
+roll_belt
+roll_arm
+magnet_arm_x
+magnet_arm_y
+magnet_dumbbell_x
+magnet_dumbbell_y
+magnet_forearm_x
+magnet_forearm_y
+magnet_belt_x
+magnet_belt_y,
method="rpart",data=training)
modelFit
modelFit=train(classe~
gyros_belt_x
+gyros_arm_x
+gyros_dumbbell_x
+gyros_forearm_x
+accel_belt_x
+accel_belt_y
+accel_belt_z
+accel_arm_x
+accel_arm_y
+accel_dumbbell_x
+accel_dumbbell_y
+accel_forearm_x
+accel_forearm_y
+pitch_belt
+pitch_arm
+pitch_dumbbell
+roll_belt
+roll_arm
+magnet_arm_x
+magnet_arm_y
+magnet_dumbbell_x
+magnet_dumbbell_y
+magnet_forearm_x
+magnet_forearm_y
+magnet_belt_x
+magnet_belt_y,
method="rpart",data=training)
modelFit
modelFit=train(classe~
gyros_belt_x
+gyros_arm_x
+gyros_dumbbell_x
+gyros_forearm_x
+accel_belt_y
+accel_arm_x
+accel_arm_y
+accel_dumbbell_x
+accel_dumbbell_y
+accel_forearm_x
+accel_forearm_y
+pitch_belt
+pitch_arm
+pitch_dumbbell
+roll_belt
+roll_arm
+magnet_arm_x
+magnet_arm_y
+magnet_dumbbell_x
+magnet_dumbbell_y
+magnet_forearm_x
+magnet_forearm_y
+magnet_belt_x
+magnet_belt_y,
method="rpart",data=training)
modelFit
modelFit=train(classe~
gyros_belt_x
+gyros_arm_x
+gyros_dumbbell_x
+gyros_forearm_x
+accel_belt_x
+accel_belt_y
+accel_arm_x
+accel_arm_y
+accel_dumbbell_x
+accel_dumbbell_y
+accel_forearm_x
+accel_forearm_y
+pitch_belt
+pitch_arm
+pitch_dumbbell
+roll_belt
+roll_arm
+magnet_arm_x
+magnet_arm_y
+magnet_dumbbell_x
+magnet_dumbbell_y
+magnet_forearm_x
+magnet_forearm_y
+magnet_belt_x
+magnet_belt_y,
method="rpart",data=training)
modelFit
modelFit=train(classe~
gyros_belt_x
+gyros_arm_x
+gyros_dumbbell_x
+gyros_forearm_x
+accel_belt_x
+accel_belt_y
+accel_arm_x
+accel_arm_y
+accel_dumbbell_x
+accel_dumbbell_y
+accel_forearm_x
+accel_forearm_y
+pitch_belt
+pitch_arm
+pitch_dumbbell
+roll_belt
+roll_arm
+magnet_arm_x
+magnet_arm_y
+magnet_dumbbell_x
+magnet_dumbbell_y
+magnet_forearm_x
+magnet_forearm_y
+magnet_belt_x
+magnet_belt_y,
method="rpart",data=training)
modelFit
set.seed(1234)
modelFit=train(classe~
gyros_belt_x
+gyros_arm_x
+gyros_dumbbell_x
+gyros_forearm_x
+accel_belt_x
+accel_belt_y
+accel_arm_x
+accel_arm_y
+accel_dumbbell_x
+accel_dumbbell_y
+accel_forearm_x
+accel_forearm_y
+pitch_belt
+pitch_arm
+pitch_dumbbell
+roll_belt
+roll_arm
+magnet_arm_x
+magnet_arm_y
+magnet_dumbbell_x
+magnet_dumbbell_y
+magnet_forearm_x
+magnet_forearm_y
+magnet_belt_x
+magnet_belt_y,
method="rpart",data=training)
modelFit
set.seed(1234)
modelFit=train(classe~
gyros_belt_x
+gyros_arm_x
+gyros_dumbbell_x
+gyros_forearm_x
+accel_belt_x
+accel_belt_y
+accel_arm_x
+accel_arm_y
+accel_dumbbell_x
+accel_dumbbell_y
+accel_forearm_x
+accel_forearm_y
+pitch_belt
+pitch_arm
+pitch_dumbbell
+roll_belt
+roll_arm
+magnet_arm_x
+magnet_arm_y
+magnet_dumbbell_x
+magnet_dumbbell_y
+magnet_forearm_x
+magnet_forearm_y
+magnet_belt_x
+magnet_belt_y,
method="rpart",data=training)
modelFit
library(ElemStatLearn)
data(vowel.train)
data(vowel.train)
vowel
vowel.train
str(vowel.train)
str(vowel.test)
summary(vowel.train)
hist(vowel.train$y)
install.packages("CORElearn")
install.packages("BradleyTerry2")
install.packages("nloptr")
library("caret")
vowel.train$y=as.factor(vowel.train$y)
vowel.test$y=as.factor(vowel.test$y)
set.seed(33833)
modfit_rf=train(y~.,data=vowel.train,method="rf",prox=TRUE)
modfit_rf
modfit_gbm=train(y~.,data=vowel.train,method="gbm",prox=TRUE)
modfit_gbm
modfit_gbm=train(y~.,data=vowel.train,method="gbm")
modfit_gbm
pred_rf=predict(modfi_rf,vowe.test)
pred_rf=predict(modfit_rf,vowe.test)
pred_rf=predict(modfit_rf,vowel.test)
pred
pred_rf
pred_gbm=predict(modfit_gbm,vowel.test)
pred_rf==vowel.test$y
a_rf=table(pred_rf,vowel.test$y)
diag(a_rf)=0
sum(a_rf)
a_rf
vowel.test$predRight<-pred_rf==vowel.test$y
a_rf=table(pred_rf,vowel.test$y)
diag(a_rf)=0
(dim(vowel.test)[1]-sum(a_rf))/dim(vowel.test)[1]
vowel.test$predRight<-pred_gbm==vowel.test$y
a_gbm=table(pred_gbm,vowel.test$y)
diag(a_gbm)=0
(dim(vowel.test)[1]-sum(a_gbm))/dim(vowel.test)[1]
a_gbm
a_rf
dim(a_rf)
install.packages("CORElearn")
install.packages("BradleyTerry2")
install.packages("nloptr")
library("caret")
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
summary(training)
summary(training$diagnosis)
modfit_rf=train(diagnosis~.,data=training,method="rf",prox=TRUE)
set.seed(62433)
modfit_rf=train(diagnosis~.,data=training,method="rf",prox=TRUE)
modfit_rf
pred_rf=predict(modfit_rf,testing)
testing$predRight<-pred_rf==testing$diagnosis
a_rf=table(pred_rf,testing$diagnosis)
diag(a_rf)=0
(dim(testing)[1]-sum(a_rf))/dim(testing)[1]
modfit_gbm=train(diagnosis~.,data=training,method="gbm")
modfit_gbm
pred_gbm=predict(modfit_gbm,testing)
testing$predRight<-pred_gbm==testing$diagnosis
a_gbm=table(pred_gbm,testing$diagnosis)
diag(a_gbm)=0
(dim(testing)[1]-sum(a_gbm))/dim(testing)[1]
modfit_lda=train(diagnosis~.,data=training,method="lda")
modfit_lda
pred_lda=predict(modfit_lda,testing)
testing$predRight<-pred_lda==testing$diagnosis
a_lda=table(pred_lda,testing$diagnosis)
diag(a_lda)=0
(dim(testing)[1]-sum(a_lda))/dim(testing)[1]
modfit_combo=train(training$diagnosis~pred_rf+pred_gbm+pred_lda,
method="rf", prox="TRUE")
length(pred_rf)
length(pred_gbm)
length(training$diagnosis)
modfit_combo=train(testing$diagnosis~pred_rf+pred_gbm+pred_lda,
method="rf", prox="TRUE")
combo_df=data.frame(pred_rf,pred_gbm,pred_lda, diagnosis=testing$diagnosis)
modfit_combo=train(diagnosis~., data=combo_df,
method="rf", prox="TRUE")
str(combo_df)
modfit_combo
combo_df
modfit_combo=train(diagnosis~., data=combo_df,
method="rf", prox="TRUE")
modfit_combo
warning()
modfit_combo=train(diagnosis~., data=combo_df,
method="rf", prox="TRUE")
warnings()
modfit_combo=train(diagnosis~., data=combo_df,
method="gam", prox="TRUE")
modfit_combo
combo_df=data.frame(pred_rf,pred_gbm,pred_lda, diagnosis=testing$diagnosis)
modfit_combo=train(diagnosis~., data=combo_df,
method="rf", prox="TRUE")
combo_df
head(testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
str(concrete)
modfit=train(CompressiveStrength~.,data=training,method="lasso")
modfit=train(CompressiveStrength~.,data=training,method="lasso")
modfit
?plot.enet
summary(modfit)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modfit=train(CompressiveStrength~.,data=training,method="svm")
modfit
modfit_svm=train(CompressiveStrength~.,data=training,method="svm")
set.seed(325)
modfit_svm=train(CompressiveStrength~.,data=training,method="svm")
library("e1071")
set.seed(325)
modfit=train(CompressiveStrength~.,data=training,method="svm")
?e1071
??e1071
model=svm(CompressiveStrength~., data=training)
model
pred=predict(model,testing)
pred
str(pred)
rmse=sqrt((pred-testing$CompressiveStrength)^2)
rmse
rmse=sum(sqrt((pred-testing$CompressiveStrength)^2))
rmse
rmse=sqrt(sum((pred-testing$CompressiveStrength)^2))
rmse
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library("e1071")
set.seed(325)
model=svm(CompressiveStrength~., data=training)
model
pred=predict(model,testing)
rmse=sqrt(sum((pred-testing$CompressiveStrength)^2))
rmse
length(rmse)
length(testing)
dim(testing)
sqrt(256)
rmse/16
rmse=sqrt(sum((pred-testing$CompressiveStrength)^2))/sqrt(dim(testing)[1])
rmse
install.packages("devtools")
library("stockPortfolio")
?getReturns
getReturns(BA)
getReturns(VOLC)
getReturns("VOLC")
getReturns("VAW")
getReturns("VOLC",start="2014-01-03",end=NULL)
getReturns("VOLC",freq =c("month","week","day"), start="2014-01-03",end=NULL)
getReturns("VOLC",freq =c("month"), start="2014-01-03",end=NULL)
getReturns("VOLC",freq ="month", start="2014-01-03",end=NULL)
getReturns("VOLC",freq ="year", start="2014-01-03",end=NULL)
getReturns("VOLC",freq ="day", start="2014-01-03",end=NULL)
getReturns("VOLC",freq ="week", start="2014-01-03",end=NULL)
getReturns("VOLC",freq ="month", start="2014-01-03",end=NULL)
getReturns("VOLC",freq ="day", start="2014-01-03",end=NULL)
getReturns("SPDR",freq ="day", start="2014-01-03",end=NULL)
getReturns("SPDR",freq ="day", start="2014-01-03",end=NULL)
getReturns("VOLC",freq ="day", start="2014-01-03",end=NULL)
getReturns("SPDR",freq ="day", start="2014-01-03",end=NULL)
getReturns("BA",freq ="day", start="2014-01-03",end=NULL)
getReturns("BA",freq ="month", start="2014-01-03",end=NULL)
getReturns("SPDR",freq ="month", start="2014-01-03",end=NULL)
getReturns("QQQ",freq ="month", start="2014-01-03",end=NULL)
getReturns("QQQ",freq ="SPY", start="2014-01-03",end=NULL)
getReturns("SPY",freq ="month", start="2014-01-03",end=NULL)
shiny::runApp('Courseracourses/DataProducts/Project')
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'rmnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd("~/Courseracourses/DataProducts/Project")
author("portfolio")
ls()
setwd("~/Courseracourses/DataProducts/Project/portfolio")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
library("stockPortfolio")
x=c("BA","IBM","JNJ","PNG","XOM")
get_returns_output=getReturns(x,freq="month",start='2013-1-1')
getReturns("BA")
getReturns("BA",freq="month",start='2013-1-1')
x="BA"
get_returns_output=getReturns(x,freq="month",start='2013-1-1')
summary(get_returns_output)
x=c("BA","IBM")
get_returns_output=getReturns(x,freq="month",start='2013-1-1')
summary(get_returns_output)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
ls
ls()
setwd("~/Courseracourses/DataProducts/Project/portfolio")
ls()
dir
pwd()
dir()
https://github.com/PatrickWong1/DataProduct
publish_github(PatrickWong1,https://github.com/PatrickWong1/DataProduct)
publish_github("PatrickWong1","https://github.com/PatrickWong1/DataProduct")
publish_github("PatrickWong1","https://github.com/PatrickWong1/DataProduct")
publish_github("PatrickWong1","http://github.com/PatrickWong1/DataProduct")
publish_github("PatrickWong1","http://github.com/PatrickWong1/DataProduct")
publish_github("PatrickWong1","https://github.com/PatrickWong1/DataProduct")
dir
dir()
publish_github("PatrickWong1","https://github.com/PatrickWong1/DataProduct")
publish_github('PatrickWong1','https://github.com/PatrickWong1/newDataProduct.git')
publish_github('PatrickWong1','https://github.com/PatrickWong1/newDataProduct.git')
publish_github('PatrickWong1','http://github.com/PatrickWong1/newDataProduct.git')
colSums()
lm()
dgamma
show()
?show()
?lm()
?colSum
?colSums
?dgamma()
?show()
?line()
?yhat()
class(TRUE)
class(lm)
mean
print
lm
methods(mean)
methods(lm)
methods(show)
show
getMethods(show)
showMethods(show)
show(mean)
showMethods(mean)
showS3Methods(mean)
getS3Methods(mean)
getS3methods(mean)
getS3method(mean)
?colsum()
?colsum
?colSums
?show
